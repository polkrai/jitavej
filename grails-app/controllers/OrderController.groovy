import org.codehaus.groovy.grails.web.json.JSONArrayimport org.codehaus.groovy.grails.web.json.JSONObjectimport grails.converters.deep.JSONimport java.io.*import javax.activation.*class OrderController {
   def scaffold = Order      def icd10Alls = []    def image = {         FileDataSource ds = new FileDataSource("C:\\opdcard7\\100521297.tif")      InputStream is = ds.inputStream      response.setContentLength(is.available())      response.setContentType(ds.contentType)      OutputStream out = response.outputStream      out << is      out.close()   } 
   def delete = {	   	   	def order = Order.get(params.order_id)		   	   	if(!order.paid){		   	order.deleted = true			order.save()			   	}	   		   	render order as JSON	}       def cancel = {        	def c = Order.createCriteria()    	    	def orders = c.list {    		       eq("patient", Patient.get(params.patient_id))	       eq("type", 'drug')	       eq("mode", 'opd')    	   order('date', 'desc')    	}      	 		   	if(orders.size > 0){			   		   	def order = orders.get(0);		   	order.deleted = true		   	order.save()	   	}	   		   	render ""	}	    def orderinvisit = {		    	def c = Order.createCriteria()    	def orders = c.list {	    	   eq("visit", Visit.get(params.visit_id))	    	   eq("type", 'drug')	    	   eq('deleted', false)    	       order('date', 'desc')    	}			   	if(orders.size > 0){			   	   		render orders.get(0)	   	}		   	   	render ""	}	    def lasticd10s = {        	def icd10s = []    		    def c1 = Order.createCriteria()	        	def orders = c1.list {    		    	   eq('patient', Patient.get(params.patient_id))	    	   eq('type', 'drug')	    	   ne('mode', 'dental')	    	   eq('deleted', false)	       	   maxResults(1)    	       order('id', 'desc')    	} 		if(orders.size > 0){			    	def c = OrderIcd10.createCriteria()				    	def orderIcd10s = c.list {					    			eq('order', orders.get(0))	    			isNull('dental')	    			order('priority', 'asc')	    	}  	    		    	orderIcd10s.each{	    		    		icd10s.add(it.icd10)	    	}	    			   	render icd10s as JSON  	   	}	   		   	render ""	}    def lastdentalicd10s = {        	def icd10s = []    	    	def c11 = Order.createCriteria()	        	def orderss = c11.list {    		    	   eq('patient', Patient.get(params.patient_id))	    	   eq('type', 'drug')	    	   ne('mode', 'dental')	    	   eq('deleted', false)	       	   maxResults(1)    	       order('id', 'desc')    	} 		if(orderss.size > 0){			    	def cc = OrderIcd10.createCriteria()				    	def orderIcd10s = cc.list {					    		eq('order', orderss.get(0))	    		isNull('dental')	    		order('priority', 'asc')	    	}  	    		    	orderIcd10s.each{	    		    		icd10s.add(it.icd10)	    	}	    		   	}    		    def c1 = Order.createCriteria()		    	def orders = c1.list {			eq('patient', Patient.get(params.patient_id))			eq('type', 'dental')			eq('deleted', false)			maxResults(1)			order('id', 'desc')    	} 		if(orders.size > 0){			    	def c = OrderIcd10.createCriteria()				    	def orderIcd10s = c.list {				eq('dental', orders.get(0))	    		order('priority', 'asc')	    	}  	    		    	orderIcd10s.each{					    		icd10s.add(it.icd10)	    	}	    			   render icd10s as JSON  	   	}	   		   	render ""	}		    def lastdrugs = {   		def orderItems = []    	def c = Order.createCriteria()    	def orders = c.list {    	   eq('visit', Visit.get(params.vn_id))    	   eq('type', 'drug')    	   ne('mode', 'dental')    	   eq('deleted', false)       	   maxResults(1)	       order('id', 'desc')    	}    			if(orders.size > 0){					   	orderItems = OrderItem.findAllByOrder(orders.get(0))	   	}	   		   	render orderItems as JSON  	  	}   def remedenddate = {	   def remedenddate	   def c = Order.createCriteria()	   	   def orders = c.list {		   eq('visit', Visit.get(params.vn_id))		   eq('type', 'drug')		   ne('mode', 'dental')		   eq('deleted', false)		   maxResults(1)		   order('id', 'desc')	   }     		   if(orders.size > 0){		   			remedenddate = orders.get(0).remedEndDate	   }		   	   if(remedenddate != null){		   			render remedenddate.getTime()		   }	   else{				   render '0'	   }	   	  	}      def remedcon = {          	println 'params.vn_id = ' + Visit.get(params.vn_id).vn		def orderItems = []    	def c = Order.createCriteria()    	def orders = c.list {    	   eq('visit', Visit.get(params.vn_id))    	   eq('type', 'drug')    	   eq('mode', 'continuation')    		//eq('stop', false)    	   eq('deleted', false)       	   maxResults(1)	       order('id', 'desc')    	}    			if(orders.size > 0 && orders.get(0).stop == false){					println orders.get(0).id						def c2 = OrderItem.createCriteria()						orderItems = c2.list {	    	   eq('order', orders.get(0))    	       order('id', 'asc')    		}					}				render orderItems as JSON	   	  	  	}		def remedunit = {          	println 'params.vn_id = ' + Visit.get(params.vn_id).vn		   		def orderItems = []    	def c = Order.createCriteria()    	def orders = c.list {	    	   eq('visit', Visit.get(params.vn_id))	    	   eq('type', 'drug')	    	   eq('mode', 'unitdose')	    	   eq('deleted', false)	       	   maxResults(1)    	       order('id', 'desc')    	}    			if(orders.size > 0 && orders.get(0).stop == false){					println orders.get(0).id						def c2 = OrderItem.createCriteria()			orderItems = c2.list {	    	   eq('order', orders.get(0))    	       order('id', 'asc')    		}					}				render orderItems as JSON	   	  	  	}     def remedconfirm = {		def orderItems = []    	def c = Order.createCriteria()    	def orders = c.list {			eq('visit', Visit.get(params.vn_id))			eq('type', 'drug')			eq('mode', 'continuation')			eq('stop', false)			eq('deleted', false)			maxResults(1)			order('id', 'desc')    	}				if(orders.size > 0){					   	orderItems = OrderItem.findAllByOrder(orders.get(0))	   	}	   		   	render orderItems as JSON  	  	}      def remedhomemed = {		def orderItems = []    	def c = Order.createCriteria()    	def orders = c.list {			eq('visit', Visit.get(params.vn_id))			eq('type', 'drug')			eq('mode', 'homemed')			eq('deleted', false)			maxResults(1)			order('id', 'desc')    	}				if(orders.size > 0){					   	orderItems = OrderItem.findAllByOrder(orders.get(0))	   	}		   	   	render orderItems as JSON  	  	}       def textinvisit = {		    	def c = Order.createCriteria()    	def orders = c.list {			eq("visit", Visit.get(params.vn_id))			eq("type", 'drug')			ne('mode', 'dental')			eq('deleted', false)			order('date', 'desc')    	}			   	if(orders.size > 0){			   	   		if(orders.get(0).medtext != null){				   	   			render orders.get(0).medtext	   		}	   	}		   	   	render ""	}	    def reorder = {				def orderItems = OrderItem.findAllByOrder(Order.get(params.order_id));				render orderItems as JSON  	  	}		def delete_drug_order_next_unitdose = {			def c = Order.createCriteria()		    	def orders = c.list {	    	   eq('visit', Visit.get(params.vn_id))	    	   eq('type', 'drug')	    	   eq('mode', 'unitdose')	    	   eq('deleted', false)	    	   eq('stop', false)	    	   order('id', 'desc')    	}     	    	orders.each{order->    		println 'deleted mode=unitdose order id = ' + order.id    		order.deleted = true    		order.save()    	}	}		/*	def cancel = {        	def c = Order.createCriteria()    	    	def orders = c.list {    		       eq("patient", Patient.get(params.patient_id))	       eq("type", 'drug')	       eq("mode", 'opd')    	   order('date', 'desc')    	}      	 		   	if(orders.size > 0){		   	def order = orders.get(0);		   	order.deleted = true		   	order.save()	   	}	   		   	render ""	}*/    def delete_drug_order_in_visit = {        	def c = Order.createCriteria()		    	def orders = c.list {	    	   eq('visit', Visit.get(params.vn_id))	    	   eq('type', 'drug')	    	   ne('mode', 'dental')	    	   eq('deleted', false)	    	   eq('paid', false)    	}     	    	orders.each{ order->    		println 'deleted order id = ' + order.id    		order.deleted = true    		order.save()    	} 	}    def refer = {		def referSend = new ReferSend();		referSend.no = params.no		referSend.to = params.to		referSend.near = params.near				referSend.date = new Date()				if(params.for1 != null){						referSend.for1 = true		}				if(params.for2 != null){						referSend.for2 = true		}				if(params.for3 != null){						referSend.for3 = true		}				if(params.for4 != null){						referSend.for4 = true		}				referSend.user = User.get(params.user_id)				referSend.patient = Patient.get(params.patient_id)				referSend.historypass = params.historypass		referSend.historynow = params.historynow		referSend.examination = params.examination		referSend.diagnosis = params.diagnosis		referSend.treatment = params.treatment		referSend.cause = params.cause		referSend.comment = params.comment				if(params.police != null){						referSend.police = params.police		}				if(params.nopolice != null){						referSend.nopolice = params.nopolice		}		referSend.save()		render ""    }				def auto = {			println params.mode					def orderitems = JSON.parse(params.orderitems)				def buff = new StringBuffer()				if(params.type == "drug"){					orderitems.each {  							def drug = Drug.get(it.getAt("drug").getAt("id"))				int qty = it.getAt("qty")						    def stock = Stock.findByDrug(drug)			    				if((stock.number) < qty){									buff.append(drug.code + " Drug out of stock\n")				}			}		}			if(buff.toString().length() > 0){					render buff.toString()		}		else {					if(params.mode == "opd" || params.mode == "remed"){							delete_drug_order_in_visit()			}							if (params.mode == "unitdose") {							delete_drug_order_next_unitdose()			}						put()		}				println "params.refer = " + params.refer				if(params.refer != null){					refer()		}	}	
    def put = {    		def order = new Order();		order.user = User.get(params.user_id);				if(params.dentist_id != null){					order.user = User.get(params.dentist_id);		}				order.visit = Visit.get(params.vn_id)		order.patient = order.visit.patient		order.type = params.type		order.mode = params.mode		order.medtext = params.medtext		order.date = new Date()		order.paid = false		if(params.mode == "continuation"){					order.stop = false			order.remed = false			order.review = "review"		}		else if(params.mode == "oneday"){						order.stop = false			order.remed = false		}		else if(params.mode == "unitdose"){						order.stop = false			order.remed = false		}		else if(params.mode == "homemed"){					order.stop = true			order.remed = false		}		else{					order.stop = true						if(params.remed != null){							int remedday = Integer.parseInt(params.remed)								if(remedday > 0){									order.remed = true					order.remedEndDate = order.date.plus(30*remedday)				}							}					}		order.save()				def dental				if(params.dentalitems != null){					dental = new Order();			dental.user = User.get(params.dentist_id);			dental.visit = Visit.get(params.vn_id)			dental.patient = order.visit.patient			dental.type = "dental"						if(dental.visit.an != null){							dental.mode = "ipd"				}			else{							dental.mode = "opd"			}						dental.medtext = params.medtext			dental.date = new Date()			dental.paid = false			dental.stop = true			dental.save()			def dentalitems = JSON.parse(params.dentalitems)			def countitem = 0						dentalitems.each {				def orderItem = new OrderItem();				orderItem.order = dental				orderItem.visit = Visit.get(params.vn_id)				orderItem.type = order.type				orderItem.date = new Date()				orderItem.startDate = order.date				orderItem.endDate = order.date				orderItem.check_start_date = order.date				orderItem.check_end_date = order.date								orderItem.item = Item.get(it.getAt("item").getAt("id"))				orderItem.tooth = it.getAt("tooth")				orderItem.surfaces = it.getAt("surfaces")								orderItem.qty = it.getAt("qty")				orderItem.price = it.getAt("fee")				orderItem.save()						def record = new Record()				record.orderItem = orderItem				record.visit = orderItem.visit				record.date = new Date()				record.qty = orderItem.qty				record.price = orderItem.price				record.save()			}		}		if(order.type == 'drug' ||  dental != null){			def icd10s = JSON.parse(params.icd10s)			def priority = 1			icd10s.each {								def orderIcd10 = new OrderIcd10()								orderIcd10.order = order								if(params.dentalitems != null){										orderIcd10.dental = dental				}								orderIcd10.visit = order.visit				orderIcd10.icd10 = Icd10.get(it.getAt("id"))				orderIcd10.code = orderIcd10.icd10.code				//println orderIcd10.icd10.code				orderIcd10.date = order.date				orderIcd10.priority = priority++				orderIcd10.save()				//println orderIcd10.icd10.code +' '+ orderIcd10.id +' in '+ order.id			}	    				}		    			def orderitems = JSON.parse(params.orderitems)		def risk = ""		def countitem = 0				orderitems.each {  					def orderItem = new OrderItem();			orderItem.order = order			orderItem.visit = Visit.get(params.vn_id)			orderItem.type = order.type			orderItem.date = new Date()			orderItem.startDate = order.date			orderItem.endDate = order.date			orderItem.check_start_date = order.date			orderItem.check_end_date = order.date							if(order.type == 'drug'){							orderItem.drug = Drug.get(it.getAt("drug").getAt("id"))				orderItem.dose = Dose.get(it.getAt("dose").getAt("id"))								if(it.getAt("reason") != null && it.getAt("reason") != ""){									orderItem.reason = it.getAt("reason")												}				else {										orderItem.reason = null				}								if(it.getAt("unit_dose") != null && it.getAt("unit_dose") != ""){									orderItem.unit_dose = it.getAt("unit_dose")												}				else {									orderItem.unit_dose = true				}								orderItem.frequency = orderItem.dose.frequency				orderItem.pertime = orderItem.dose.pertime				orderItem.item = orderItem.drug.item				orderItem.med_status = 1				orderItem.drug_status = 0				orderItem.med_comment = ""				orderItem.drug_comment = ""						orderItem.doseText = orderItem.dose.code				orderItem.time = orderItem.dose.time													if(orderItem.drug.generic.risk){									risk = risk + orderItem.drug.name + ', '				}			}			else if(order.type == 'lab'){							orderItem.item = Item.get(it.getAt("item").getAt("id"))			}				orderItem.qty = it.getAt("qty")			orderItem.price = orderItem.item.price						//if(order.type == 'drug' && (order.mode == 'continuation' || order.mode == 'unitdose')){			if(order.type == 'drug' && order.mode == 'continuation') {								orderItem.balance = it.getAt("balance") + it.getAt("qty")								def orderitem0 = OrderItem.get(it.getAt("id"))								if(orderitem0 != null){					def order0 = orderitem0.order					order0.stop = true					order0.save()										def record = new Record()					record.orderItem = orderitem0					record.visit = order.visit					record.date = new Date()									if(it.getAt("return") != ""){												orderitem0.stop = true						orderitem0.save()												def return2 = Double.parseDouble(""+it.getAt("return"))							record.qty = orderitem0.balance - return2						orderItem.balance = 0												if(it.getAt("qty") > 0){													orderItem.balance = it.getAt("qty")						}											}					else{											record.qty = 0					}										record.price = orderItem.price					record.save()															}				orderItem.stop = it.getAt("stop")								if(orderItem.stop != true){									orderItem.save()					countitem++				}											}			else{							orderItem.stop = true				orderItem.save()				countitem++			}									if(order.type == 'drug' && (order.mode == 'oneday' || order.mode == 'unitdose' || order.mode == 'homemed')){								def record = new Record()								record.orderItem = orderItem				record.visit = orderItem.visit				record.date = new Date()				record.qty = orderItem.qty				record.price = orderItem.price				record.save()				}						if(order.type == 'lab'){							def record = new Record()				record.orderItem = orderItem				record.visit = orderItem.visit				record.date = new Date()				record.qty = orderItem.qty				record.price = orderItem.price				record.save()								def labItemValues = LabItemValue.findAllByItem(orderItem.item,[sort:'order',order:'asc'])				int order2 = 1;				labItemValues.each{									def labResult = new LabResult()					labResult.record = record					labResult.labValue = it.labValue					labResult.standard = labResult.labValue.standard					labResult.result = ' '					labResult.order = order2++;					labResult.save()				}			}		}		if(order.type == 'drug'){					def patient = order.patient			patient.risk = risk			patient.save()		}			if(order.type == 'drug' && order.mode == 'continuation' && countitem == 0){						order.deleted = true			order.save()		}				render ""    }		def history = {			def c = Order.createCriteria()					def ordersall = c.list {						eq("patient", Patient.get(params.patient_id))	   			if(params.type != 'drug'){	   				eq("type", params.type)			}	  			if(params.type == 'drug' && params.mode == '0'){				or{					and{						eq("type", 'drug')						or{							eq("mode", 'opd')							eq("mode", 'remed')							eq("mode", 'homemed')							eq("mode", 'post')						}					}					and{						eq("type", 'visit')					}				}			}			else if(params.type == 'drug' && params.mode == '1'){	   				eq("type", 'drug')				or{					eq("mode", 'continuation')					eq("mode", 'oneday')					eq("mode", 'unitdose')					eq("mode", 'homemed')				}			}						eq("deleted", false)			order("date", 'desc')		}					java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd/MM/yyyy", Locale.US);					/*		def orders = new Vector()		def date = null		ordersall.each { order ->			if(dateFormat.format(order.date) != date || order.mode == 'oneday'  || order.mode == 'continuation' || order.type == 'lab' || order.type == 'psycho'){				orders.add(order)				date = dateFormat.format(order.date)			}		}		*/					def orders = new Vector()		def order_mode = null		def vn = null					ordersall.each { order ->			if(order.visit.vn != vn || order.mode == 'oneday' || order.mode == 'continuation' || order.mode == 'unitdose' || order.type == 'lab' || order.type == 'psycho'){									orders.add(order)					vn = order.visit.vn			}		}					def fooList = new ArrayList()				orders.each { order ->			def fooMap = new HashMap()			fooMap.put("id", order.id)			fooMap.put("vn", order.visit.vn)			fooMap.put("opdcard", (order.visit.image != "")?order.visit.image:null)						if(order.remedEndDate != null){								fooMap.put("remed", order.remedEndDate.getTime())			}			if(order.type == 'visit'){							if(order.visit.an == null){									fooMap.put("time", dateFormat.format(order.date) + " (ไม่มียา)")				}				else{									fooMap.put("time", dateFormat.format(order.date) + " (รับไว้รักษา)")				}							}			else if(order.mode != 'opd'){								/*				if (order.mode == "homemed"){					order_mode = "ยากลับบ้าน"				}				else if (order.mode == "dental"){					order_mode = "ทันตกรรม"				}				else if (order.mode == "unitdose"){					order_mode = "Unitdose"				}				else if (order.mode == "remed"){					order_mode = "รับยาเดิม"				}				else if (order.mode == "post"){					order_mode = "ยาส่งไปรษณีย์"				}				else if (order.mode == "continuation"){					order_mode = "ยาใช้ต่อเนื่อง"				}				else if (order.mode == "oneday"){					order_mode = "ยาใช้หนึ่งวัน"				}				*/								order_mode = order.mode								fooMap.put("time", dateFormat.format(order.date) + " (" + order_mode + ")")			}			else if(order.mode == 'opd' && order.visit.an != null){							fooMap.put("time", dateFormat.format(order.date) + " (รับไว้รักษา)")			}			else{								fooMap.put("time", dateFormat.format(order.date))			}	  			if(order.user != null){									if (order.user.userGroup.id == 1) {											fooMap.put("usergroup", order.user.userGroup.name + " : ")				}				else {										fooMap.put("usergroup", "เจ้าหน้าที่" + order.user.userGroup.name + " : ")				}								fooMap.put("doctor", order.user.firstname + " " + order.user.lastname)			}			else{							fooMap.put("doctor", "")			}						if(order.type == 'lab') {								fooMap.put("is_approve", order.is_approve)			}						if(order.medtext != null){								fooMap.put("text", order.medtext)			}			else{							fooMap.put("text", "")			}			fooList.add(fooMap)		}			render fooList as JSON	}		    def records = {				def c = Record.createCriteria()				def list = c.list {			   			orderItem {				   	   			eq("order", Order.get(params.order_id))   			}   					   		order('id', 'asc')    	}     	def order = Order.get(params.order_id)    	        def fooList = new ArrayList()                list.each { record ->            def fooMap = new HashMap()			            fooMap.put("id", record.id)			            if(record.orderItem.drug != null){                        	fooMap.put("drug", record.orderItem.drug.code +' <b> ('+ record.orderItem.drug.account + ')</b>')            	fooMap.put("dose", record.orderItem.doseText)            }            if(record.orderItem.item != null){                        	fooMap.put("item", record.orderItem.item.name)            }            if(record.orderItem.reason != null){                        	fooMap.put("reason", record.orderItem.reason)            }                        if(record.orderItem.unit_dose != null){                        	fooMap.put("unit_dose", record.orderItem.unit_dose)            }            			if(order.type == 'drug' && order.mode == 'continuation'){							if(record.orderItem.stop){									fooMap.put("qty", record.qty + " (ปิด)")				}				else{									fooMap.put("qty", record.orderItem.qty)				}			}			else{							fooMap.put("qty", record.qty)			}                        fooList.add(fooMap)        }        render fooList as JSON			}    def icd10s = {        	def c = OrderIcd10.createCriteria()    	def list = c.list {						eq("order", Order.get(params.order_id))			order('priority', 'asc')    	}         def fooList = new ArrayList()		        list.each { orderIcd10 ->            def fooMap = new HashMap()			            fooMap.put("priority", orderIcd10.priority)            fooMap.put("code", orderIcd10.code)            fooMap.put("name", orderIcd10.icd10.name)            fooList.add(fooMap)        }        render fooList as JSON			}	    def history2 = {			def history = []				def visits = Visit.findAllByPatient(Patient.get(params.patient_id), [sort:'date',order:'desc'])	   	visits.each{visit ->	   		def records = Record.findAllByVisit(visit, [sort:'date', order:'desc'])	   		records.each{record ->	   			def type = record.orderItem.order.type	   			if(type == 'drug' && params.drug == 'true'){					   				history.add(record)	   			}				else if(type == 'sm' && params.sm == 'true'){					   				history.add(record)	   			}				else if(type == 'psycho' && params.psyco == 'true'){					   				history.add(record)	   			}				else if(type == 'lab' && params.lab == 'true'){					   				history.add(record)	   			}	   				   		}    	}	        def fooList = new ArrayList()		        history.each { record ->            def fooMap = new HashMap()            fooMap.put("time", record.date)            fooMap.put("vn", record.orderItem.order.visit.vn)            fooMap.put("type", record.orderItem.order.type)            fooMap.put("order", record.orderItem.order.id)			//fooMap.put("record", record.orderItem.item.name+" "+record.orderItem.doseText)						if(record.orderItem.drug != null){								fooMap.put("record", record.orderItem.drug.item.name +" "+record.orderItem.doseText)			}			else{								fooMap.put("record", record.orderItem.item.name)			}						fooMap.put("record_id", record.id)						fooMap.put("qty", record.qty)			            fooList.add(fooMap)        }        render fooList as JSON			}		    def remed = {        	println 'remed > ' + params.patient_id				def c = Order.createCriteria()		    	def orders = c.list {			eq("patient", Patient.get(params.patient_id))			gt("remedEndDate", new Date())			eq("remed", true)			eq("deleted", false)			order('id', 'desc')    	}     	    	java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd/MM/yyyy",Locale.US);  				println orders.size		        def fooList = new ArrayList()		        orders.each { order ->            def fooMap = new HashMap()            fooMap.put("time1", dateFormat.format(order.date))            fooMap.put("time2", dateFormat.format(order.remedEndDate))                        if(order.user != null){                       		fooMap.put("doctor", order.user.firstname +' '+order.user.lastname)            }            else{				            	fooMap.put("doctor", "")            }			            fooMap.put("vn", order.visit.vn)            fooMap.put("type", order.type)            fooMap.put("order", order.id)            fooMap.put("id", order.id)             fooList.add(fooMap)        }        render fooList as JSON			}		def checkremed = {		    	def c = Order.createCriteria()		    	def orders = c.list {						eq("patient", Patient.get(params.pa_id))			lt("remedEndDate", new Date())			eq("remed", true)    	}						if(orders.size > 0){						render 'true'		}		else{						render 'false'		}	}	    def order_items = {		def order_items = OrderItem.findAllByOrder(Order.get(params.order_id), [sort:'id'])	   			order_items.each{ item ->	   		item.drug.name	   		item.item.name	   		item.qty    	}		    		   	render order_items as JSON  	}	def order_approves = {		def order_approves = Approve.findAllByOrder(Order.get(params.order_id), [sort:'id'])	   			order_approves.each{ approve ->	   		approve.lab_type	   		approve.scan_labresult    	}		    		   	render order_approves as JSON  	}}

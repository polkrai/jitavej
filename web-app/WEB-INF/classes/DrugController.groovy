import grails.converters.deep.JSONimport org.codehaus.groovy.grails.web.json.JSONObjectimport grails.converters.*class DrugController {
	def scaffold = Drug		def findByOracle = {					def drugname = params.oracle		println "drug.oracle >>>" + drugname			//def drug = Drug.findByOracle1LikeOrOracle2LikeOrOracle3LikeOrOracle4LikeOrOracle5LikeOrOracle6LikeOrOracle7Like(drugname,drugname,drugname,drugname,drugname,drugname,drugname)    	def c = Drug.createCriteria()    	def list = c.list { 	    	or {	    		 ilike('oracle1', drugname)	    		 ilike('oracle2', drugname)	    		 ilike('oracle3', drugname)	    		 ilike('oracle4', drugname)	    		 ilike('oracle5', drugname)	    		 ilike('oracle6', drugname)	    		 ilike('oracle7', drugname)	    		 ilike('oracle8', drugname)	    		 ilike('oracle9', drugname)	    		 ilike('oracle10', drugname)	    		 	    	}    	          	}     			def drug = null				if(list.size() > 0){			drug = list.get(0)		}						//println "drug.oracle >>>" + drug				if(drug != null){			println drug.id +" "+ drug.name			render drug.id +" "+ drug.code					}		else{					render '-'		}							}	
    def suggest = {		
    	String key = params.key		    	def c = Drug.createCriteria()    	def list = c.list { 	    	or {	    		 ilike('code', ""+key+"%")	    		 ilike('name', ""+key+"%")	    	}    	       	    	eq('status', 1)			eq('drug_from_home', false)    	    order('code', 'asc')    	}     	        def fooList = new ArrayList()                list.each { drug ->            def fooMap = new HashMap()            fooMap.put("code", drug.code)            fooMap.put("name", drug.name)            fooMap.put("account", drug.account)            def stock = Stock.findByDrug(drug)                        if(stock != null){                       	           	  	fooMap.put("number", stock.number)            }            else{                       		fooMap.put("number", 0)            }                       fooList.add(fooMap)        }        render fooList as JSON		
    }
    	def checkStock = {	 		def stock = Stock.findByDrug(Drug.get(params.drug_id)) 		    	if(stock != null){        	       	   	  		render stock.number    	}    	else{    	   			render 0    	}	}	    def list2 = {    	 	//println "DrugService --> list()!!!!";	    def list = Drug.list();	    	  	/*	  	list.each {     		Item item = new Item()    		item.name = it.name    		item.price = 0    		item.unit = Unit.get(1)    		item.save()    		print item.name    		it.item = item    		it.save()	    	//print it.name	    }	    */	    	    render list.encodeAsJSON()    }	    def interactionlist = {        	//def list = Interaction.list()    	    	def c = Interaction.createCriteria()    	    	def list = c.list { 	    	eq('deleted', false)    	    order('id', 'asc')    	}         def fooList = new ArrayList()                list.each { interaction ->            def fooMap = new HashMap()            fooMap.put("generic1", interaction.generic1.name)            fooMap.put("generic2", interaction.generic2.name)            fooMap.put("comments", interaction.comments)            fooMap.put("notorder", interaction.notorder)                        fooList.add(fooMap)        }	    		    	        render fooList as JSON		    }	
    def findByCode = {    
    	def drug = Drug.findByCodeIlike(params.code)    	drug.item   		render drug as JSON
    } 
        def findDrugAndDose = {    	def drug = Drug.findByNameIlike(params.name)    	drug.item    	    	if(params.dose != null){    		def dose = Dose.findByNameIlike(params.dose)    		def list = new Vector()    		list.add(drug)    		list.add(dose)    		render list as JSON    	}    	else{    	    		render drug as JSON    	}    } 		def drugError = {	    	def c = DrugError.createCriteria()    	def list = c.list {    		 eq('patient', Patient.get(params.patient_id))    	}    	    	render list as JSON	}	    def get2 = {    	  	def drug = Drug.get(params.drug_id)	   	render drug as JSON	} 		
    def order = {    
    	println "DrugService > " + params.data
    	def jsonArray = JSON.parse(params.data)    	println "Class of jsonArray: ${jsonArray.class.name}"    	jsonArray.each {     		//def inputObject = JSON.parse(it)    		//def drug = new Drug( inputObject )      	    int start = it.toString().indexOf(":")    		int end = it.toString().indexOf(",")    		    		String tmp = it.toString().substring(start+1, end)    		println "tmp: "+ tmp    		int drugId = Integer.parseInt(tmp)    		    		Drug drug = Drug.get(drugId)    		      		println "Drug: "+ drug.name    	}    	
    	render ""
    }
    	def test1 = {			def json = Drug.get(2).encodeAsJSON()		println json		def inputObject = JSON.parse(json)				Drug drug = new Drug(inputObject)		drug.name = drug.name + "-json"		drug.save()		render json	}
}

import org.codehaus.groovy.grails.web.json.JSONObjectimport grails.converters.*import grails.converters.deep.JSONimport org.codehaus.groovy.grails.web.servlet.mvc.GrailsHttpSessionclass ItemController {
	def scaffold = Item		def putdental = {			println 'putdental > ' + params.item_id		def item				if(params.item_id != null){			item = Item.get(params.item_id)		}		else{					item = new Item()			item.group_id = 32			item.unit = Unit.get(6)		}				item.code = params.code		item.name = params.name		item.price = Double.parseDouble(params.price)		item.save()				render 'putdental'	}				def importlabitem = {		def item = new Item()		item.name = params.name		item.group = Group.findByOracleId(params.group_id)		item.price = Double.parseDouble(params.price)		item.oracleId = params.oracle_id		item.deleted = false		item.unit = Unit.get(2)		item.save()		render item.id	}	
    def suggest = {

    	String key = params.key  
    	def list = Item.findAllByNameIlike("%"+key+"%", [max:5,sort:'id']); 
        render list.encodeAsJSON()
    }
        def suggestlab = {    	String key = params.key     	def c = Item.createCriteria()    	def list = c.list {    	       ilike('name', ""+key+"%")    	       isNotNull('group')	    	       eq('deleted', false)			   /*			   if(session.ipd == 'true'){				   				   eq('ipd', true)			   }			   */    	       maxResults(5)    	       order('name', 'asc')    	}     	        render list.encodeAsJSON()    }		def suggestdental = {    	String key = params.key    	def c = Item.createCriteria()    	def list = c.list {			ilike("name", "%" + key + "%")			and {				eq('deleted', false)			}			or{				eq('group_id', 29)				eq('group_id', 32)			}			maxResults(5)			order('name', 'asc')						/*    	    ilike('name', "%"+key+"%")    	    eq('group_id', 32)    	    eq('deleted', false)    	    maxResults(5)    	    order('name', 'asc')    	    */    	}         render list.encodeAsJSON()    }	    def lablist = {	    	def c = Item.createCriteria()	    	def list = c.list {	    	       group {	    	    	   eq("type", "lab")	    	       }	    	       eq("deleted", false)	    	       order('name', 'asc')	    	} 	    	list.each { 	    		it.group.name	        }	    		        render list as JSON	}
    def findByName = {		//println params.name
		def item = Item.findByName(params.name)
        render item.encodeAsJSON()
    } 
    
   	def test1 = {		def json = Item.get(2).encodeAsJSON()		println json		def inputObject = JSON.parse(json)				Item item = new Item(inputObject)		item.name = item.name + "-json"		item.save()		render json	}
        def list2 = {//    	println "ItemService --> list()!!cs!!";		    	def list = Item.list();        render list.encodeAsJSON()	}	def list3 = {    	def list = Item.createCriteria().list {	    		if(params.type != null && params.type == 'dental'){    			eq('group_id', 32)	   		}    		if(params.key != ''){    			or{        			ilike('code', '%' +params.key+ '%')    			        			ilike('name', '%' +params.key+ '%')    				    			}    		}    		//maxResults(20)    		order('name', 'asc')        	}         def fooList = new ArrayList()    	list.each { item->            def fooMap = new HashMap()            fooMap.put('id', item.id)            fooMap.put('code', item.code)            fooMap.put('name', item.name)            fooMap.put('price', item.price)                        fooList.add(fooMap);        }                render fooList as JSON	   		     }	    	}
